{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/constants.js",
    "src/index.js",
    "src/objects/Ant.js",
    "src/objects/Cell.js",
    "src/objects/Grid.js",
    "src/objects/History.js",
    "src/states/GameState.js",
    "src/utils.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "export const CellWidth = 50;\nexport const ElapsedTime = 500;\nexport const SizeTerrain = 51;\nexport const AntsColor = [\n\t\"brown\",\n\t\"red\",\n\t\"yellow\",\n\t\"grey\"\n];\n\nexport function convertToNumberColor(color) {\n\tif(!AntsColor.includes(color)) {\n\t\treturn 0;\n\t}\n\treturn AntsColor.indexOf(color);\n}\n\nexport const WidthCanvas = 800;\nexport const HeighCanvas = 600;",
    "import GameState from 'states/GameState';\nimport { getSize }  from './utils';\n\nclass Game extends Phaser.Game {\n\n\tconstructor() {\n    const width = getSize()[0];\n    const height = getSize()[1];\n\t\tsuper(width, height, Phaser.AUTO, 'content', null);\n\t\tthis.state.add('GameState', GameState, false);\n\t\tthis.state.start('GameState');\n\t}\n\n}\n\nwindow.game = Game;\n\n//new Game();\n",
    "import { CellWidth, ElapsedTime, AntsColor, convertToNumberColor } from '../constants';\nimport { mod } from \"../utils\";\n\nconst Tilt = 90;\nclass Ant extends Phaser.Sprite{\n\n  constructor(game, x, y, antColor = AntsColor[0]) {\n    const convertToColorFn = (number) => {\n      return convertToNumberColor(antColor) * 3 + number;\n    };\n\n    super(game, x, y, \"ant\", convertToColorFn(0));\n    this.antRotation = 180;\n    this.frame = convertToColorFn(12);\n\n    const downArray = [0, 1, 2].map(convertToColorFn);\n    const leftArray = [12, 13, 14].map(convertToColorFn);\n    const rightArray = [24, 25, 26].map(convertToColorFn);\n    const upArray = [36, 37, 38].map(convertToColorFn);\n\n    this.animations.add('down', downArray, 10, true);\n    this.animations.add('left', leftArray, 10, true);\n    this.animations.add('right', rightArray, 10, true);\n    this.animations.add('up', upArray , 10, true);\n\n    this.currentTweenLeft = null;\n    this.currentTweenRight = null;\n    this.currentTweenUp = null;\n    this.currentTweenDown = null;\n\n    this.game = game;\n\t}\n\n  rotate(direction) {\n    const newRotation = direction > 0 ? (this.antRotation + Tilt) : (this.antRotation - Tilt);\n    this.antRotation = mod(newRotation, 360);\n  }\n\n  goTo(xPos, yPos, antRotation) {\n    this.animations.stop(null, true)\n    this.x = xPos;\n    this.y = yPos;\n    this.antRotation = antRotation;\n    this.currentTweenLeft.stop();\n    this.currentTweenRight.stop();\n    this.currentTweenUp.stop();\n    this.currentTweenDown.stop();\n  }\n\n  updateAnt(cell) {\n    if(cell.isChecked()) {\n      this.rotate(1);\n    } else {\n      this.rotate(-1);\n    }\n    switch(this.antRotation) {\n      case 0:\n        this.turnRight();\n      break;\n      case 90:\n        this.goUp();\n      break;\n      case 180:\n        this.turnLeft();\n      break;\n      case 270:\n        this.goDown();\n      break;\n    }\n  }\n\n  goDown() {\n    const position = this.y + CellWidth;\n    this.currentTweenDown = this.game.add.tween(this).to( { y: position }, window.ElapsedTime || ElapsedTime, Phaser.Easing.Linear.None, true);\n    this.animations.play(\"down\", 45, true);\n    this.animations.stop(\"up\");\n    this.animations.stop(\"left\");\n    this.animations.stop(\"right\");\n  }\n\n  goUp() {\n    const position = this.y - CellWidth;\n    this.currentTweenUp = this.game.add.tween(this).to( { y: position }, window.ElapsedTime || ElapsedTime, Phaser.Easing.Linear.None, true);\n    this.animations.play(\"up\", 45, true);\n    this.animations.stop(\"down\");\n    this.animations.stop(\"left\");\n    this.animations.stop(\"right\");\n  }\n\n  turnLeft() {\n    const position = this.x - CellWidth;\n    this.currentTweenLeft = this.game.add.tween(this).to( { x: position }, window.ElapsedTime || ElapsedTime, Phaser.Easing.Linear.None, true);\n    this.animations.play(\"left\", 45, true);\n    this.animations.stop(\"down\");\n    this.animations.stop(\"up\");\n    this.animations.stop(\"right\");\n  }\n\n  turnRight() {\n    const position = this.x + CellWidth;\n    this.currentTweenRight = this.game.add.tween(this).to( { x: position }, window.ElapsedTime || ElapsedTime, Phaser.Easing.Linear.None, true);\n    this.animations.play(\"right\", 45, true);\n    this.animations.stop(\"down\");\n    this.animations.stop(\"left\");\n    this.animations.stop(\"up\");\n  }\n}\n\nexport default Ant;",
    "const GreyColor = 0xCAC8C8;\nconst WhiteColor = 0xFFFFFFF;\n\nclass Cell extends Phaser.Graphics{\n\n\tconstructor(game, x, y, width, height, color= 0xFFFFFFF, lineColor = 0x000000) {\n\t\tsuper(game, 0, 0);\n\t\tthis.beginFill(color);\n\t\tthis.lineStyle(2, lineColor, 1);\n    this.drawRect(x, y, width, height);\n    this.checked = false;\n    this.realPosition = {x, y};\n\t  this.lineColor = lineColor;\n    this.color = color;\n  }\n\n  toggle() {\n    this.checked = !this.checked;\n    this.draw();\n  }\n\n  draw() {\n    const newColor = this.checked ? GreyColor: WhiteColor;\n    this.beginFill(newColor);\n    this.lineStyle(2, this.lineColor, 1);\n    this.drawRect(this.realPosition.x, this.realPosition.y, this.width, this.height);\n  }\n\n  isChecked() {\n    return this.checked;\n  }\n}\n\nexport default Cell;",
    "import Cell from 'objects/Cell';\nimport { CellWidth } from \"../constants\"\n\nclass Grid extends Phaser.Group {\n\n  constructor(game, nbRow, nbColumn, cellSize, xOrigin = 0, yOrigin = 0, cellColor = 0xFFFFFFF, gridColor = 0x000000) {\n    super(game);\n    this.nbRow = nbRow;\n    this.nbColumn = nbColumn;\n    for(let y = 0; y < nbColumn; ++y) {\n      for(let x = 0; x < nbRow; ++x) {\n        this.add( new Cell(game, x * cellSize + xOrigin, y * cellSize + yOrigin, cellSize, cellSize, cellColor, gridColor) );\n      }\n    }\n  }\n\n  getCell(rowIndex, columnIndex) {\n    if(rowIndex > this.nbRow || columnIndex > this.nbColumn) {\n      console.error(\"Grid::getCell out of border\");\n      return null;\n    }\n    const index = rowIndex + columnIndex * this.nbColumn;\n    return this.getAt( index );\n  }\n\n  getCellAtPosition(x, y) {\n    const indexX = Math.trunc( x / CellWidth );\n    const indexY = Math.trunc( y / CellWidth );\n    return this.getCell( indexX, indexY );\n  }\n\n  setStates(arrayState) {\n    arrayState.forEach((value, index) => {\n      if(this.children[index].checked != value) {\n        this.children[index].checked = value;\n        this.children[index].draw();\n      }\n    });\n  }\n\n  getCellsArray() {\n    return this.children.map(cell => {\n      return cell.checked;\n    });\n  }\n\n}\n\nexport default Grid;",
    "//only work for one ant\nclass History {\n\n  constructor() {\n    this.record = [];\n    this.isRecording = false;\n  }\n\n  start() {\n    this.isRecording = true;\n  }\n\n  reset() {\n    this.record =  [];\n    this.isRecording = false;\n  }\n\n  stop() {\n    this.isRecording = false;\n  }\n\n  recordStep(step, ant, gridArray) {\n    const { x, y, antRotation } = ant;\n    if(this.isRecording) {\n      this.record[step] = { x, y, antRotation, grid: gridArray };\n    }\n  }\n\n  getTo(step) {\n    if(!this.record[step]) {\n      return null;\n    }\n    return this.record[step];\n  }\n  \n}\n\nexport default History;",
    "import Grid from 'objects/Grid';\nimport Ant from 'objects/Ant';\nimport History from 'objects/History';\n\nimport { CellWidth, ElapsedTime, SizeTerrain, WidthCanvas, HeighCanvas } from '../constants';\nimport { endSimulation } from '../utils';\n\nconst CameraVelocity = 10;\nconst TimeoutRecord = 500;\n\nclass GameState extends Phaser.State {\n\n  create() {\n    const sizeT = window.gridSize || SizeTerrain;\n    const Bounds = CellWidth * sizeT;\n    console.log(Bounds)\n    this.game.world.setBounds(0, 0, Bounds, Bounds);\n    this.gridLayout = new Grid(this.game, Bounds/ CellWidth, Bounds/CellWidth, CellWidth);\n    this.cursors = this.game.input.keyboard.createCursorKeys();\n\n    this.ant = new Ant(this.game, 0, 0, \"red\");\n    this.game.add.existing(this.ant);\n\n    this.textStep = this.game.add.text(this.game.world.width * 0.01, this.game.world.height * 0.01, \"Steps: \", { font: \"20px Arial\", fill: \"#FFFFFF\", align: \"center\" });\n    this.textStep.fixedToCamera = true;\n    this.textStep.stroke = '#000000';\n    this.textStep.strokeThickness = 6;\n    this.setAntCenter(Bounds);\n\n    this.steps = 0;\n    this.timer = this.game.time.create(false);\n    this.timer.add(window.ElapsedTime || ElapsedTime, this.updatePosition, this);\n    this.timer.start();\n\n    this.game.time.advancedTiming = true;\n\n    this.replay = new History();\n    this.replay.start();\n    this.replay.recordStep(this.steps, this.ant, this.gridLayout.getCellsArray());\n\n    this.initCamera();\n  }\n\n  initCamera() {\n    this.game.camera.x = this.game.world.width / 2 - WidthCanvas / 2;\n    this.game.camera.y = this.game.world.height / 2 - HeighCanvas / 2;\n  }\n\n  setAntCenter(Bounds) {\n    const indexX = Math.trunc( (Bounds / CellWidth) / 2 );\n    const indexY = Math.trunc( (Bounds / CellWidth) / 2 );\n    this.setAntOnCell(indexX, indexY);\n  }\n\n  setAntOnCell(indexX, indexY) {\n    const cell = this.gridLayout.getCell(indexX, indexY);\n    this.ant.x = cell.realPosition.x + CellWidth / 2 - this.ant.width / 2;\n    this.ant.y = cell.realPosition.y + CellWidth / 2 - this.ant.height / 2;\n  }\n\n  preload() {\n    this.game.stage.disableVisibilityChange = true;\n    this.game.load.spritesheet('ant', 'res/ants.png', 32, 32);\n  }\n\n  updatePosition() {\n    let cell = this.gridLayout.getCellAtPosition( this.ant.x, this.ant.y );\n    if(cell === -1) {\n      endSimulation();\n      return;\n    }\n    this.ant.updateAnt(cell);\n    cell.toggle();\n    this.steps += 1;\n    this.textStep.text = \"Steps: \" + this.steps;\n    this.replay.recordStep(this.steps, this.ant, this.gridLayout.getCellsArray());\n    //setTimeout(asyncRecord , TimeoutRecord);\n    if(window.play === true) {\n      this.timer.add(window.ElapsedTime || ElapsedTime, this.updatePosition, this);\n      window.updateHistorySlider(this.steps);\n    }\n  }\n\n  setSimulationTo(step) {\n    this.timer.removeAll();\n    const stepInt = parseInt(step || 1);\n    const simulationData = this.replay.getTo(stepInt - 1);\n    this.gridLayout.setStates(simulationData.grid);\n    this.ant.goTo(simulationData.x, simulationData.y, simulationData.antRotation);\n    this.steps = stepInt;\n    this.timer.add(window.ElapsedTime || ElapsedTime, this.updatePosition, this);\n  }\n\n  update() {\n      if (this.cursors.up.isDown)\n      {\n        this.game.camera.y -= CameraVelocity;\n      }\n      else if (this.cursors.down.isDown)\n      {\n        this.game.camera.y += CameraVelocity;\n      }\n\n      if (this.cursors.left.isDown)\n      {\n        this.game.camera.x -= CameraVelocity;\n      }\n      else if (this.cursors.right.isDown)\n      {\n        this.game.camera.x += CameraVelocity;\n      }\n  }\n\n  // render() {\n  //   //this.game.debug.spriteBounds(this.ant);\n  //   this.game.debug.text(this.game.time.fps, 2, 14, \"#00ff00\");\n  // }\n\n\n}\n\nexport default GameState;\n",
    "import { CellWidth, SizeTerrain, WidthCanvas, HeighCanvas } from './constants';\n\nexport function mod(a, b) {\n    return ((a % b) + b) % b;\n}\n\nexport function getSize() {\n  if(!window.gridSize) {\n    return [WidthCanvas, HeighCanvas];\n  }\n\n  const sizeT = window.gridSize;\n  const bounds = CellWidth * sizeT;\n  let width = bounds;\n  let height = bounds;\n\n  if(bounds > WidthCanvas) {\n    width = WidthCanvas;\n  }\n  if(bounds > HeighCanvas) {\n    height = HeighCanvas;\n  }\n  return [width, height];\n}\n\nexport function endSimulation() {\n  alert(\"End of the simulation : ant went out of grid\");\n}"
  ]
}